scalar Date

type Image {
  height: Int!
  url: String!
  width: Int!
  isSquared: Boolean!
}

type AlbumSearchResult {
  id: ID!
  name: String!
  images: [Image!]!
  releaseYear: String!
  artists: String!
}

type TrackSearchResult {
  id: ID!
  name: String!
  images: [Image!]!
  album: String!
  artists: String!
  releaseYear: String!
}

type ArtistSearchResult {
  id: ID!
  name: String!
  images: [Image!]!
}

type SearchResult {
  albums: [AlbumSearchResult!]!
  tracks: [TrackSearchResult!]!
  artists: [ArtistSearchResult!]!
}

type Reviewer {
  id: ID!
  name: String!
  image: String
}

interface Review {
  id: ID!
  rating: Int!
  author: Reviewer!
  post: String
  edited: Boolean!
  createdAt: Date!
  updatedAt: Date!
}

type AlbumReview implements Review {
  albumId: String!
  id: ID!
  rating: Int!
  author: Reviewer!
  post: String
  edited: Boolean!
  createdAt: Date!
  updatedAt: Date!
}

type TrackReview implements Review {
  trackId: String!
  id: ID!
  rating: Int!
  author: Reviewer!
  post: String
  edited: Boolean!
  createdAt: Date!
  updatedAt: Date!
}

input AlbumReviewFilterInput {
  post: String
  rating: Int!
}

enum OrderBy {
  recent
  rating
}

enum OrderDirection {
  asc
  desc
}

type Query {
  search(q: String!, limit: Int, offset: Int): SearchResult!
  albumReviews(
    albumId: ID!
    limit: Int
    offset: Int
    orderBy: OrderBy
    direction: OrderDirection
  ): [AlbumReview!]!
  trackReviews(
    trackId: ID!
    limit: Int
    offset: Int
    orderBy: OrderBy
    direction: OrderDirection
  ): [TrackReview!]!
}

input ReviewInput {
  post: String
  rating: Int!
}

type Mutation {
  reviewAlbum(albumId: ID!, review: ReviewInput!): AlbumReview!
  reviewTrack(trackId: ID!, review: ReviewInput!): TrackReview!
}
